import{warning as S}from"../../../utils/errors-1c110e5d.js";import{clamp as h}from"../../../utils/clamp-eab0e97e.js";import{secondsToMilliseconds as g,millisecondsToSeconds as T}from"../../../utils/time-conversion-2fe207ba.js";const m=.001,A=.01,D=10,G=.05,I=1;function E({duration:t=800,bounce:p=.25,velocity:e=0,mass:o=1}){let a,r;S(t<=g(D));let s=1-p;s=h(G,I,s),t=h(A,D,T(t)),s<1?(a=n=>{const i=n*s,c=i*t,f=i-e,l=w(n,s),M=Math.exp(-c);return m-f/l*M},r=n=>{const c=n*s*t,f=c*e+e,l=Math.pow(s,2)*Math.pow(n,2)*t,M=Math.exp(-c),N=w(Math.pow(n,2),s);return(-a(n)+m>0?-1:1)*((f-l)*M)/N}):(a=n=>{const i=Math.exp(-n*t),c=(n-e)*t+1;return-m+i*c},r=n=>{const i=Math.exp(-n*t),c=(e-n)*(t*t);return i*c});const b=5/t,x=j(a,r,b);if(t=g(t),isNaN(x))return{stiffness:100,damping:10,duration:t};{const n=Math.pow(x,2)*o;return{stiffness:n,damping:s*2*Math.sqrt(o*n),duration:t}}}const R=12;function j(t,p,e){let o=e;for(let a=1;a<R;a++)o=o-t(o)/p(o);return o}function w(t,p){return t*Math.sqrt(1-p*p)}export{w as calcAngularFreq,E as findSpring,I as maxDamping,D as maxDuration,G as minDamping,A as minDuration};
