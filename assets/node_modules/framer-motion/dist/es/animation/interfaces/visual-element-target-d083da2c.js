import{frame as A}from"../../frameloop/index-0bf9a1a0.js";import{transformProps as w}from"../../render/html/utils/transform-f683e7d2.js";import{optimizedAppearDataAttribute as T}from"../optimized-appear/data-id-b980bcfa.js";import{animateMotionValue as P}from"./motion-value-c48217fa.js";import{isWillChangeMotionValue as S}from"../../value/use-will-change/is-00f55687.js";import{setTarget as V}from"../../render/utils/setters-fccd3562.js";function C({protectedKeys:t,needsAnimating:i},n){const e=t.hasOwnProperty(n)&&i[n]!==!0;return i[n]=!1,e}function x(t,i,{delay:n=0,transitionOverride:e,type:p}={}){let{transition:m=t.getDefaultTransition(),transitionEnd:r,...c}=t.makeTargetAnimatable(i);const f=t.getValue("willChange");e&&(m=e);const s=[],d=p&&t.animationState&&t.animationState.getState()[p];for(const o in c){const a=t.getValue(o),u=c[o];if(!a||u===void 0||d&&C(d,o))continue;const g={delay:n,elapsed:0,...m};if(window.HandoffAppearAnimations&&!a.hasAnimated){const l=t.getProps()[T];l&&(g.elapsed=window.HandoffAppearAnimations(l,o,a,A))}a.start(P(o,a,u,t.shouldReduceMotion&&w.has(o)?{type:!1}:g));const h=a.animation;S(f)&&(f.add(o),h.then(()=>f.remove(o))),s.push(h)}return r&&Promise.all(s).then(()=>{r&&V(t,r)}),s}export{x as animateTarget};
