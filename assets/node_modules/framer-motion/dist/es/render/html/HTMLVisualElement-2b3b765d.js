import{buildHTMLStyles as n}from"./utils/build-styles-fa54617b.js";import{isCSSVariableName as s}from"../dom/utils/is-css-variable-dd3f1444.js";import{transformProps as l}from"./utils/transform-f683e7d2.js";import{scrapeMotionValuesFromProps as m}from"./utils/scrape-motion-values-b8bc7b46.js";import{renderHTML as u}from"./utils/render-fa45b191.js";import{getDefaultValueType as a}from"../dom/value-types/defaults-8eb84754.js";import{measureViewportBox as p}from"../../projection/utils/measure-246770e2.js";import{DOMVisualElement as c}from"../dom/DOMVisualElement-f37af459.js";import{isMotionValue as d}from"../../value/utils/is-motion-value-3b0729b7.js";function f(i){return window.getComputedStyle(i)}class w extends c{readValueFromInstance(e,t){if(l.has(t)){const r=a(t);return r&&r.default||0}else{const r=f(e),o=(s(t)?r.getPropertyValue(t):r[t])||0;return typeof o=="string"?o.trim():o}}measureInstanceViewportBox(e,{transformPagePoint:t}){return p(e,t)}build(e,t,r,o){n(e,t,r,o.transformTemplate)}scrapeMotionValuesFromProps(e,t){return m(e,t)}handleChildMotionValue(){this.childSubscription&&(this.childSubscription(),delete this.childSubscription);const{children:e}=this.props;d(e)&&(this.childSubscription=e.on("change",t=>{this.current&&(this.current.textContent=`${t}`)}))}renderInstance(e,t,r,o){u(e,t,r,o)}}export{w as HTMLVisualElement,f as getComputedStyle};
